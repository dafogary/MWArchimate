<?php
# This file was automatically generated by the MediaWiki 1.43.1
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/MainConfigSchema.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "WaaS 1.43.1";
$wgMetaNamespace = "WaaS_1.43.1";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "/waas1431";

## The protocol and server name to use in fully-qualified URLs
$wgServer = "http://localhost";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [
	'1x' => "$wgResourceBasePath/common/modicon.svg",
	'icon' => "$wgResourceBasePath/common/modicon.svg",
];

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "ukstratcomdd-cis-eus-waas@mod.gov.uk";
$wgPasswordSender = "ukstratcomdd-cis-eus-waas@mod.gov.uk";

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "localhost";
$wgDBname = "waas1431";
$wgDBuser = "root";
$wgDBpassword = "RingwoodE27!";

# MySQL specific settings
$wgDBprefix = "";
$wgDBssl = false;

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Shared database table
# This has no effect unless $wgSharedDB is also set.
$wgSharedTables[] = "actor";

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
#$wgUseImageMagick = true;
#$wgImageMagickConvertCommand = "/usr/bin/convert";

$wgFileExtensions = array( 'pdf', 'doc', 'docx', 'ppt', 'pptx', 'xls', 'xlsx', 'jpg', 'png', 'txt', 'jpeg', 'mp4', 'svg');
//Archimate
// More permissive file upload settings
//$wgStrictFileExtensions = false;
//$wgCheckFileExtensions = false;
//$wgAllowJavaUploads = true;
//$wgVerifyMimeType = false;
//$wgMimeTypeExclusions = [];

// Explicitly allow XML and Archimate files
$wgFileExtensions[] = 'archimate';

// Set debug logging
$wgDebugLogFile = "/var/www/html/waas1431/debug.log";
$wgShowExceptionDetails = true;
$wgShowSQLErrors = true;
$wgDebugDumpSql = true;

$viewerPath = '/extensions/MWArchimate/modules/MWArchimateViewerandAnalyzer.html';
$viewerHtml = $wgScriptPath . $viewerPath;

//Archimate end

$wgExternalLinkTarget = '_blank';

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = false;

# Site language code, should be one of the list in ./includes/languages/data/Names.php
$wgLanguageCode = "en-gb";

# Time zone
$wgLocaltimezone = "UTC";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

$wgSecretKey = "2c5011038fc4d8ccaec290346102aa44e1839c4dcafe891388f30652d9256032";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "55dba823173839d7";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

$wgAllowPageInclusion = true;

## Default skin: you can change the default skin. Use the internal symbolic
## names, e.g. 'vector' or 'monobook':
$wgDefaultSkin = "vector-2022";

$wgResourceLoaderDebug = true; // Optional: Helps with debugging

$wgHooks['BeforePageDisplay'][] = function ( $out, $skin ) {
    $out->addStyle("common/govStyle.css");
};

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'MinervaNeue' );
wfLoadSkin( 'MonoBook' );
wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );

//Global Extensions
//wfLoadExtension( 'AbuseFilter' );
wfLoadExtension( 'CategoryTree' );
wfLoadExtension( 'Cite' );
wfLoadExtension( 'CiteThisPage' );
wfLoadExtension( 'ConfirmEdit' );
wfLoadExtension( 'Gadgets' );
wfLoadExtension( 'ImageMap' );
wfLoadExtension( 'InputBox' );
wfLoadExtension( 'Interwiki' );
wfLoadExtension( 'Math' );
wfLoadExtension( 'MultimediaViewer' );
wfLoadExtension( 'Nuke' );
wfLoadExtension( 'OATHAuth' );
wfLoadExtension( 'PageImages' );
wfLoadExtension( 'ParserFunctions' );
wfLoadExtension( 'PdfHandler' );
wfLoadExtension( 'Poem' );
//wfLoadExtension( 'Renameuser' );
wfLoadExtension( 'ReplaceText' );
wfLoadExtension( 'Scribunto' );
wfLoadExtension( 'SecureLinkFixer' );
wfLoadExtension( 'SpamBlacklist' );
wfLoadExtension( 'SyntaxHighlight_GeSHi' );
wfLoadExtension( 'TemplateData' );
wfLoadExtension( 'TextExtracts' );
wfLoadExtension( 'TitleBlacklist' );
wfLoadExtension ( 'VisualEditor' );
# End of automatically generated settings.
# Add more configuration options below.

//Custom extensions

wfLoadExtension( 'AdminLinks' );
wfLoadExtension( 'Analytics' );
wfLoadExtension( 'ApprovedRevs' );
wfLoadExtension( 'AtMentions' );
//wfLoadExtension( 'Bootstrap' );
wfLoadExtension( 'Comments' );
wfLoadExtension( 'CountDownClock' );
wfLoadExtension( 'DarkMode' );
wfLoadExtension( 'DataTransfer' );

wfLoadExtension( 'DateTimeTools' );
wfLoadExtension( 'DiscussionTools' );
wfLoadExtension( 'Echo' );
wfLoadExtension( 'ExternalData' );
wfLoadExtension( 'FlexDiagrams' );
wfLoadExtension( 'JSBreadCrumbs' );
wfLoadExtension( 'JsonConfig' );
wfLoadExtension( 'LastUserLogin' );
wfLoadExtension( 'Linter' );
wfLoadExtension( 'Lockdown' );
wfLoadExtension( 'LoginNotify' );
wfLoadExtension( 'MagicNoCache' );
wfLoadExtension( 'MediaWikiChat' );
wfLoadExtension( 'MyVariables' );
wfLoadExtension( 'MWArchimate' );
wfLoadExtension( 'Network' );
wfLoadExtension( 'HeaderFooter' );
wfLoadExtension( 'OOJSPlus' );
wfLoadExtension( 'RSS' );
wfLoadExtension( 'SimpleFooterLink' );
//require_once "$IP/extensions/SocialProfile/SocialProfile.php";
wfLoadExtension( 'Thanks' );
wfLoadExtension( 'UserPageViewTracker' );
wfLoadExtension( 'VEForAll' );
$wgHooks['VEForAllToolbarConfigNormal'][] = function( &$defaultConfigNormal ) {
        $defaultConfigNormal[4]['include'][] = 'math';
        $defaultConfigNormal[4]['include'][] = 'media';
        $defaultConfigNormal[] = [ 'name' => 'reference' ];
};
wfLoadExtension( 'VoteNY' );
wfLoadExtension( 'SkinPerPage' );

wfLoadExtension( 'Popups' );
$wgPopupsHideOptInOnPreferencesPage = true;
$wgPopupsOptInDefaultState = '1';
$wgPopupsReferencePreviewsBetaFeature = false;
//wfLoadExtension( 'RottenLinks' );
//wfLoadExtension( 'SaferHTMLTag' );
wfLoadExtension( 'SimpleFooterLink' );
wfLoadExtension( 'TextExtracts' );
wfLoadExtension( 'UserAgreement' );
$wgUserAgreement_DaysToReaccept = 365;
$wgGroupPermissions['bureaucrat']['useragreement-audit'] = true;
$wgUserMergeProtectedGroups = [ 'administrators' ];
wfLoadExtension( 'FlexDiagrams' );
wfLoadExtension( 'Widgets' );
wfLoadExtension( 'WikiEditor' );

//Edit account
wfLoadExtension( 'EditAccount' );
$wgGroupPermissions['bureaucrat']['editaccount'] = true;
$wgGroupPermissions['editaccount']['editaccount'] = true;

//Semantic Bundle
wfLoadExtension( 'SemanticResultFormats' );
wfLoadExtension( 'Maps' );
wfLoadExtension( 'ModernTimeline' );
wfLoadExtension( 'Mermaid' );
//wfLoadExtension( 'SemanticExtraSpecialProperties' );
//wfLoadExtension( 'SemanticCompoundQueries' );
//wfLoadExtension( 'SemanticCite' );
//wfLoadExtension( 'SemanticMetaTags' );
//wfLoadExtension( 'SemanticBreadcrumbLinks' );
//wfLoadExtension( 'SemanticInterlanguageLinks' );
wfLoadExtension( 'PageForms' );
$wgPageFormsSimpleUpload = true;
//END of Semantic Bundle

wfLoadExtension( 'SemanticMediaWiki' );
//enableSemantics( 'dafoshowcase.com/enterprisewiki' );
$host = parse_url($wgServer, PHP_URL_HOST);
enableSemantics($host);

//MediaWiki Settings
$wgGroupPermissions['*']['createaccount'] = false;
$wgGroupPermissions['*']['edit'] = false;

$wgDiff3 = "/usr/bin/diff3";# Path to the GNU diff3 utility. Used for conflict resolution.
$wgShellLocale = "en_US.utf8";
$wgPingback = false; //Stop Mediawiki pinging mediawiki.org

$wgCacheDirectory = "$IP/cache"; //Enable Caching

//Namespaces
// Define constants for my additional namespaces.
define("NS_ADMIN", 3000); // This MUST be even.
define("NS_ADMIN_TALK", 3001); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_ADMIN] = "Admin";
$wgExtraNamespaces[NS_ADMIN_TALK] = "Admin_talk"; // Note underscores in the namespace name.

// Define constants for my additional namespaces.
define("NS_ASSETS", 3002); // This MUST be even.
define("NS_ASSETS_TALK", 3003); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_ASSETS] = "Assets";
$wgExtraNamespaces[NS_ASSETS_TALK] = "Assets_talk"; // Note underscores in the namespace name.

// Define constants for my additional namespaces.
define("NS_COMPONENTS", 3004); // This MUST be even.
define("NS_COMPONENTS_TALK", 3005); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_COMPONENTS] = "Components";
$wgExtraNamespaces[NS_COMPONENTS_TALK] = "Components_talk"; // Note underscores in the namespace name.

// Define constants for my additional namespaces.
define("NS_AGENDA", 3006); // This MUST be even.
define("NS_AGENDA_TALK", 3007); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_AGENDA] = "Agenda";
$wgExtraNamespaces[NS_AGENDA_TALK] = "Agenda_talk"; // Note underscores in the namespace name.

// Define constants for my additional namespaces.
define("NS_BLOG", 3008); // This MUST be even.
define("NS_BLOG_TALK", 3009); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_BLOG] = "Blog";
$wgExtraNamespaces[NS_BLOG_TALK] = "Blog_talk"; // Note underscores in the namespace name.

// Define constants for my additional namespaces.
define("NS_DIN", 3010); // This MUST be even.
define("NS_DIN_TALK", 3011); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_DIN] = "DIN";
$wgExtraNamespaces[NS_DIN_TALK] = "DIN_talk"; // Note underscores in the namespace name.

// Define constants for my additional namespaces.
define("NS_HOWTO", 3012); // This MUST be even.
define("NS_HOWTO_TALK", 3013); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_HOWTO] = "Howto";
$wgExtraNamespaces[NS_HOWTO_TALK] = "Howto_talk"; // Note underscores in the namespace name.

// Define constants for my additional namespaces.
define("NS_KANBAN", 3014); // This MUST be even.
define("NS_KANBAN_TALK", 3015); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_KANBAN] = "Kanban";
$wgExtraNamespaces[NS_KANBAN_TALK] = "Kanban_talk"; // Note underscores in the namespace name.

// Define constants for my additional namespaces.
define("NS_RODS", 3016); // This MUST be even.
define("NS_RODS_TALK", 3017); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_RODS] = "RODs";
$wgExtraNamespaces[NS_RODS_TALK] = "RODs_talk"; // Note underscores in the namespace name.

// Define constants for my additional namespaces.
define("NS_RISKS", 3018); // This MUST be even.
define("NS_RISKS_TALK", 3019); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_RISKS] = "Risks";
$wgExtraNamespaces[NS_RISKS_TALK] = "Risks_talk"; // Note underscores in the namespace name.

// Define constants for my additional namespaces.
define("NS_WAAS", 3020); // This MUST be even.
define("NS_WAAS_TALK", 3021); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_WAAS] = "WaaS";
$wgExtraNamespaces[NS_WAAS_TALK] = "WaaS_talk"; // Note underscores in the namespace name.

// Define constants for my additional namespaces.
define("NS_MAINTENANCE", 3022); // This MUST be even.
define("NS_MAINTENANCE_TALK", 3023); // This MUST be the following odd integer.

// Add namespaces.
$wgExtraNamespaces[NS_MAINTENANCE] = "Maintenance";
$wgExtraNamespaces[NS_MAINTENANCE_TALK] = "Maintenance_talk"; // Note underscores in the namespace name.


error_reporting( -1 );
ini_set( 'display_errors', 1 );
$wgShowExceptionDetails = true;
$wgShowSQLErrors = true;
$wgDebugDumpSql = true;


$smwgNamespacesWithSemanticLinks = [
    NS_MAIN => true,
    NS_TALK => true,
    NS_USER => true,
    NS_PROJECT => true,
    NS_HELP => true,
    NS_CATEGORY => true,
    // Add your custom namespaces, e.g.:
    NS_ASSETS => true,
    NS_COMPONENTS => true, 
    NS_AGENDA => true, 
    NS_BLOG => true, 
    NS_DIN => true, 
    NS_HOWTO => true, 
    NS_KANBAN => true, 
    NS_RODS => true, 
    NS_RISKS => true, 
    NS_WAAS => true, 
];